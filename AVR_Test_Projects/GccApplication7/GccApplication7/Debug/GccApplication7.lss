
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000176  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000606  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b0  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000022a  00000000  00000000  00000a32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000bc  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000272  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000022f  00000000  00000000  00000f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000011b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 e7       	ldi	r30, 0x76	; 118
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	8e d0       	rcall	.+284    	; 0x166 <main>
  4a:	93 c0       	rjmp	.+294    	; 0x172 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <_Z9port_initv>:
#define rs1 PORTD|=0b00000100 // установка линии RS в 1 (данные)
#define rs0 PORTD&=0b11111011

void port_init()
{
	DDRD = 0xFF;
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;
  52:	12 ba       	out	0x12, r1	; 18
  54:	08 95       	ret

00000056 <_Z14send_half_byteh>:
}

void send_half_byte(unsigned char c)
{
	c<<=4;
	e1;
  56:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  58:	95 e8       	ldi	r25, 0x85	; 133
  5a:	9a 95       	dec	r25
  5c:	f1 f7       	brne	.-4      	; 0x5a <_Z14send_half_byteh+0x4>
  5e:	00 00       	nop
	_delay_us(50);
	PORTD&=0b00001111;
  60:	92 b3       	in	r25, 0x12	; 18
  62:	9f 70       	andi	r25, 0x0F	; 15
  64:	92 bb       	out	0x12, r25	; 18
	PORTD|=c;
  66:	92 b3       	in	r25, 0x12	; 18
	PORTD = 0x00;
}

void send_half_byte(unsigned char c)
{
	c<<=4;
  68:	82 95       	swap	r24
  6a:	80 7f       	andi	r24, 0xF0	; 240
	e1;
	_delay_us(50);
	PORTD&=0b00001111;
	PORTD|=c;
  6c:	89 2b       	or	r24, r25
  6e:	82 bb       	out	0x12, r24	; 18
	e0;
  70:	93 98       	cbi	0x12, 3	; 18
  72:	85 e8       	ldi	r24, 0x85	; 133
  74:	8a 95       	dec	r24
  76:	f1 f7       	brne	.-4      	; 0x74 <_Z14send_half_byteh+0x1e>
  78:	00 00       	nop
  7a:	08 95       	ret

0000007c <_Z9send_bytehh>:
	_delay_us(50);
}

void send_byte(unsigned char c, unsigned char mode)
{
  7c:	cf 93       	push	r28
  7e:	c8 2f       	mov	r28, r24
	if (mode==0) 
  80:	61 11       	cpse	r22, r1
  82:	02 c0       	rjmp	.+4      	; 0x88 <_Z9send_bytehh+0xc>
	{
		rs0;
  84:	92 98       	cbi	0x12, 2	; 18
  86:	01 c0       	rjmp	.+2      	; 0x8a <_Z9send_bytehh+0xe>
	}
	else 
	{
		rs1;
  88:	92 9a       	sbi	0x12, 2	; 18
	}
	unsigned char hc=0;
	hc=c>>4;
	send_half_byte(hc); 
  8a:	8c 2f       	mov	r24, r28
  8c:	82 95       	swap	r24
  8e:	8f 70       	andi	r24, 0x0F	; 15
  90:	e2 df       	rcall	.-60     	; 0x56 <_Z14send_half_byteh>
	send_half_byte(c);
  92:	8c 2f       	mov	r24, r28
  94:	e0 df       	rcall	.-64     	; 0x56 <_Z14send_half_byteh>
}
  96:	cf 91       	pop	r28
  98:	08 95       	ret

0000009a <_Z8lcd_initv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f e2       	ldi	r24, 0x2F	; 47
  9c:	95 e7       	ldi	r25, 0x75	; 117
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <_Z8lcd_initv+0x4>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_Z8lcd_initv+0xa>
  a4:	00 00       	nop

void lcd_init()
{
	_delay_ms(15);
	send_half_byte(0b00000011);
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	d6 df       	rcall	.-84     	; 0x56 <_Z14send_half_byteh>
  aa:	8f e3       	ldi	r24, 0x3F	; 63
  ac:	9f e1       	ldi	r25, 0x1F	; 31
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <_Z8lcd_initv+0x14>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_Z8lcd_initv+0x1a>
  b4:	00 00       	nop
	_delay_ms(4);
	send_half_byte(0b00000011);
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	ce df       	rcall	.-100    	; 0x56 <_Z14send_half_byteh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	87 ec       	ldi	r24, 0xC7	; 199
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <_Z8lcd_initv+0x24>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_Z8lcd_initv+0x2a>
  c4:	00 00       	nop
	_delay_us(100);
	send_half_byte(0b00000011);
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	c6 df       	rcall	.-116    	; 0x56 <_Z14send_half_byteh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f ec       	ldi	r24, 0xCF	; 207
  cc:	97 e0       	ldi	r25, 0x07	; 7
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <_Z8lcd_initv+0x34>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_Z8lcd_initv+0x3a>
  d4:	00 00       	nop
	_delay_ms(1);
	send_half_byte(0b00000010);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	be df       	rcall	.-132    	; 0x56 <_Z14send_half_byteh>
  da:	8f ec       	ldi	r24, 0xCF	; 207
  dc:	97 e0       	ldi	r25, 0x07	; 7
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <_Z8lcd_initv+0x44>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <_Z8lcd_initv+0x4a>
  e4:	00 00       	nop
	_delay_ms(1);
	send_byte(0b00101000, 0); //4бит-режим (DL=0) и 2 линии (N=1)
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	88 e2       	ldi	r24, 0x28	; 40
  ea:	c8 df       	rcall	.-112    	; 0x7c <_Z9send_bytehh>
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <_Z8lcd_initv+0x56>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <_Z8lcd_initv+0x5c>
  f6:	00 00       	nop
	_delay_ms(1);	
	send_byte(0b00001100, 0); //включаем изображение на дисплее (D=1), курсоры никакие не включаем (C=0, B=0)
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	bf df       	rcall	.-130    	; 0x7c <_Z9send_bytehh>
  fe:	8f ec       	ldi	r24, 0xCF	; 207
 100:	97 e0       	ldi	r25, 0x07	; 7
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <_Z8lcd_initv+0x68>
 106:	00 c0       	rjmp	.+0      	; 0x108 <_Z8lcd_initv+0x6e>
 108:	00 00       	nop
	_delay_ms(1);
	send_byte(0b00000110, 0); //курсор (хоть он у нас и невидимый) будет двигаться влево
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	b6 df       	rcall	.-148    	; 0x7c <_Z9send_bytehh>
 110:	8f ec       	ldi	r24, 0xCF	; 207
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <_Z8lcd_initv+0x7a>
 118:	00 c0       	rjmp	.+0      	; 0x11a <_Z8lcd_initv+0x80>
 11a:	00 00       	nop
 11c:	08 95       	ret

0000011e <_Z9send_charh>:
}

void send_char(unsigned char c)
{

	send_byte(c,1);
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	ad df       	rcall	.-166    	; 0x7c <_Z9send_bytehh>
 122:	08 95       	ret

00000124 <_Z7str_lcdPc>:
	 adress=(0x40*y+x)|0b10000000;
	 send_byte(adress, 0);
}

void str_lcd (char str1[])
{
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	8c 01       	movw	r16, r24
 132:	7c 01       	movw	r14, r24
	unsigned int n;
	for(n=0; n<(strlen(str1)); n++)
 134:	c0 e0       	ldi	r28, 0x00	; 0
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	05 c0       	rjmp	.+10     	; 0x144 <_Z7str_lcdPc+0x20>
	{
		send_char(str1[n]);
 13a:	f7 01       	movw	r30, r14
 13c:	81 91       	ld	r24, Z+
 13e:	7f 01       	movw	r14, r30
 140:	ee df       	rcall	.-36     	; 0x11e <_Z9send_charh>
}

void str_lcd (char str1[])
{
	unsigned int n;
	for(n=0; n<(strlen(str1)); n++)
 142:	21 96       	adiw	r28, 0x01	; 1
 144:	f8 01       	movw	r30, r16
 146:	01 90       	ld	r0, Z+
 148:	00 20       	and	r0, r0
 14a:	e9 f7       	brne	.-6      	; 0x146 <_Z7str_lcdPc+0x22>
 14c:	31 97       	sbiw	r30, 0x01	; 1
 14e:	e0 1b       	sub	r30, r16
 150:	f1 0b       	sbc	r31, r17
 152:	ce 17       	cp	r28, r30
 154:	df 07       	cpc	r29, r31
 156:	88 f3       	brcs	.-30     	; 0x13a <_Z7str_lcdPc+0x16>
	{
		send_char(str1[n]);
	}
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	08 95       	ret

00000166 <main>:
int main(void)
{
	port_init();
 166:	73 df       	rcall	.-282    	; 0x4e <_Z9port_initv>
	lcd_init();
 168:	98 df       	rcall	.-208    	; 0x9a <_Z8lcd_initv>
	str_lcd("sosi hui!");
 16a:	80 e6       	ldi	r24, 0x60	; 96
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	da df       	rcall	.-76     	; 0x124 <_Z7str_lcdPc>
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0xa>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
