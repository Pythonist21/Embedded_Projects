
Remote controlling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000021e  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a8  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000843  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002e1  00000000  00000000  00000bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002e4  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000016c  00000000  00000000  00001194  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002f8  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002fa  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000078  00000000  00000000  000018f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	a9 c0       	rjmp	.+338    	; 0x16a <__vector_11>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e1       	ldi	r30, 0x1E	; 30
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 38       	cpi	r26, 0x82	; 130
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	db d0       	rcall	.+438    	; 0x200 <main>
  4a:	e7 c0       	rjmp	.+462    	; 0x21a <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <_Z14send_half_byteh>:
﻿#include "lcd.h"
void send_half_byte(unsigned char c)
{
	c<<=4;
	e1;
  4e:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	90 e1       	ldi	r25, 0x10	; 16
  52:	9a 95       	dec	r25
  54:	f1 f7       	brne	.-4      	; 0x52 <_Z14send_half_byteh+0x4>
  56:	00 c0       	rjmp	.+0      	; 0x58 <_Z14send_half_byteh+0xa>
	_delay_us(50);
	PORTD&=0b00001111;
  58:	92 b3       	in	r25, 0x12	; 18
  5a:	9f 70       	andi	r25, 0x0F	; 15
  5c:	92 bb       	out	0x12, r25	; 18
	PORTD|=c;
  5e:	92 b3       	in	r25, 0x12	; 18
﻿#include "lcd.h"
void send_half_byte(unsigned char c)
{
	c<<=4;
  60:	82 95       	swap	r24
  62:	80 7f       	andi	r24, 0xF0	; 240
	e1;
	_delay_us(50);
	PORTD&=0b00001111;
	PORTD|=c;
  64:	89 2b       	or	r24, r25
  66:	82 bb       	out	0x12, r24	; 18
	e0;
  68:	93 98       	cbi	0x12, 3	; 18
  6a:	80 e1       	ldi	r24, 0x10	; 16
  6c:	8a 95       	dec	r24
  6e:	f1 f7       	brne	.-4      	; 0x6c <_Z14send_half_byteh+0x1e>
  70:	00 c0       	rjmp	.+0      	; 0x72 <_Z14send_half_byteh+0x24>
  72:	08 95       	ret

00000074 <_Z9send_bytehh>:
	_delay_us(50);
}

void send_byte(unsigned char c, unsigned char mode)
{
  74:	cf 93       	push	r28
  76:	c8 2f       	mov	r28, r24
	if (mode==0)
  78:	61 11       	cpse	r22, r1
  7a:	02 c0       	rjmp	.+4      	; 0x80 <_Z9send_bytehh+0xc>
	{
		rs0;
  7c:	92 98       	cbi	0x12, 2	; 18
  7e:	01 c0       	rjmp	.+2      	; 0x82 <_Z9send_bytehh+0xe>
	}
	else
	{
		rs1;
  80:	92 9a       	sbi	0x12, 2	; 18
	}
	unsigned char hc=0;
	hc=c>>4;
	send_half_byte(hc);
  82:	8c 2f       	mov	r24, r28
  84:	82 95       	swap	r24
  86:	8f 70       	andi	r24, 0x0F	; 15
  88:	e2 df       	rcall	.-60     	; 0x4e <_Z14send_half_byteh>
	send_half_byte(c);
  8a:	8c 2f       	mov	r24, r28
  8c:	e0 df       	rcall	.-64     	; 0x4e <_Z14send_half_byteh>
}
  8e:	cf 91       	pop	r28
  90:	08 95       	ret

00000092 <_Z8lcd_initv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	85 ea       	ldi	r24, 0xA5	; 165
  94:	9e e0       	ldi	r25, 0x0E	; 14
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <_Z8lcd_initv+0x4>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <_Z8lcd_initv+0xa>
  9c:	00 00       	nop

void lcd_init()
{
	_delay_ms(15);
	send_half_byte(0b00000011);
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	d6 df       	rcall	.-84     	; 0x4e <_Z14send_half_byteh>
  a2:	87 ee       	ldi	r24, 0xE7	; 231
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <_Z8lcd_initv+0x14>
  aa:	00 c0       	rjmp	.+0      	; 0xac <_Z8lcd_initv+0x1a>
  ac:	00 00       	nop
	_delay_ms(4);
	send_half_byte(0b00000011);
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	ce df       	rcall	.-100    	; 0x4e <_Z14send_half_byteh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	91 e2       	ldi	r25, 0x21	; 33
  b4:	9a 95       	dec	r25
  b6:	f1 f7       	brne	.-4      	; 0xb4 <_Z8lcd_initv+0x22>
  b8:	00 00       	nop
	_delay_us(100);
	send_half_byte(0b00000011);
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	c8 df       	rcall	.-112    	; 0x4e <_Z14send_half_byteh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <_Z8lcd_initv+0x30>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <_Z8lcd_initv+0x36>
  c8:	00 00       	nop
	_delay_ms(1);
	send_half_byte(0b00000010);
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	c0 df       	rcall	.-128    	; 0x4e <_Z14send_half_byteh>
  ce:	89 ef       	ldi	r24, 0xF9	; 249
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <_Z8lcd_initv+0x40>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <_Z8lcd_initv+0x46>
  d8:	00 00       	nop
	_delay_ms(1);
	send_byte(0b00101000, 0); //4бит-режим (DL=0) и 2 линии (N=1)
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	88 e2       	ldi	r24, 0x28	; 40
  de:	ca df       	rcall	.-108    	; 0x74 <_Z9send_bytehh>
  e0:	89 ef       	ldi	r24, 0xF9	; 249
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <_Z8lcd_initv+0x52>
  e8:	00 c0       	rjmp	.+0      	; 0xea <_Z8lcd_initv+0x58>
  ea:	00 00       	nop
	_delay_ms(1);
	send_byte(0b00001100, 0); //включаем изображение на дисплее (D=1), курсоры никакие не включаем (C=0, B=0)
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	c1 df       	rcall	.-126    	; 0x74 <_Z9send_bytehh>
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <_Z8lcd_initv+0x64>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <_Z8lcd_initv+0x6a>
  fc:	00 00       	nop
	_delay_ms(1);
	send_byte(0b00000110, 0); //курсор (хоть он у нас и невидимый) будет двигаться влево
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	b8 df       	rcall	.-144    	; 0x74 <_Z9send_bytehh>
 104:	89 ef       	ldi	r24, 0xF9	; 249
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <_Z8lcd_initv+0x76>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_Z8lcd_initv+0x7c>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <_Z9send_charh>:
}

void send_char(unsigned char c)
{

	send_byte(c,1);
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	af df       	rcall	.-162    	; 0x74 <_Z9send_bytehh>
 116:	08 95       	ret

00000118 <_Z7set_poshj>:
}

void set_pos(unsigned char x, unsigned y)
{
	char adress;
	adress=(0x40*y+x)|0b10000000;
 118:	90 e4       	ldi	r25, 0x40	; 64
 11a:	69 9f       	mul	r22, r25
 11c:	80 0d       	add	r24, r0
 11e:	11 24       	eor	r1, r1
	send_byte(adress, 0);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	80 68       	ori	r24, 0x80	; 128
 124:	a7 df       	rcall	.-178    	; 0x74 <_Z9send_bytehh>
 126:	08 95       	ret

00000128 <_Z7str_lcdPc>:
}

void str_lcd (char str1[])
{
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	8c 01       	movw	r16, r24
 136:	7c 01       	movw	r14, r24
	unsigned int n;
	for(n=0; n<(strlen(str1)); n++)
 138:	c0 e0       	ldi	r28, 0x00	; 0
 13a:	d0 e0       	ldi	r29, 0x00	; 0
 13c:	05 c0       	rjmp	.+10     	; 0x148 <_Z7str_lcdPc+0x20>
	{
		send_char(str1[n]);
 13e:	f7 01       	movw	r30, r14
 140:	81 91       	ld	r24, Z+
 142:	7f 01       	movw	r14, r30
 144:	e6 df       	rcall	.-52     	; 0x112 <_Z9send_charh>
}

void str_lcd (char str1[])
{
	unsigned int n;
	for(n=0; n<(strlen(str1)); n++)
 146:	21 96       	adiw	r28, 0x01	; 1
 148:	f8 01       	movw	r30, r16
 14a:	01 90       	ld	r0, Z+
 14c:	00 20       	and	r0, r0
 14e:	e9 f7       	brne	.-6      	; 0x14a <_Z7str_lcdPc+0x22>
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	e0 1b       	sub	r30, r16
 154:	f1 0b       	sbc	r31, r17
 156:	ce 17       	cp	r28, r30
 158:	df 07       	cpc	r29, r31
 15a:	88 f3       	brcs	.-30     	; 0x13e <_Z7str_lcdPc+0x16>
	{
		send_char(str1[n]);
	}
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	ff 90       	pop	r15
 166:	ef 90       	pop	r14
 168:	08 95       	ret

0000016a <__vector_11>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include "main.h"
#include "uart.h"
ISR(USART_RXC_vect)//Переривання по закiнченню передачі. Перевіряє вміст регістру UDR
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	switch(UDR)
 18c:	8c b1       	in	r24, 0x0c	; 12
 18e:	80 33       	cpi	r24, 0x30	; 48
 190:	61 f0       	breq	.+24     	; 0x1aa <__vector_11+0x40>
 192:	81 33       	cpi	r24, 0x31	; 49
 194:	99 f4       	brne	.+38     	; 0x1bc <__vector_11+0x52>
	{
		case '1':
		PORTC = (1<<PC0) | (1<<PC1);
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	85 bb       	out	0x15, r24	; 21
		//lcd_clear();
		set_pos(0,0);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	bb df       	rcall	.-138    	; 0x118 <_Z7set_poshj>
		str_lcd("POWER:ON");
 1a2:	80 e6       	ldi	r24, 0x60	; 96
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	c0 df       	rcall	.-128    	; 0x128 <_Z7str_lcdPc>
		break;
 1a8:	12 c0       	rjmp	.+36     	; 0x1ce <__vector_11+0x64>
		case '0':
		PORTC = 0x00;
 1aa:	15 ba       	out	0x15, r1	; 21
		//lcd_clear();
		set_pos(0,0);
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	b2 df       	rcall	.-156    	; 0x118 <_Z7set_poshj>
		str_lcd("POWER:OFF");
 1b4:	89 e6       	ldi	r24, 0x69	; 105
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	b7 df       	rcall	.-146    	; 0x128 <_Z7str_lcdPc>
		break;
 1ba:	09 c0       	rjmp	.+18     	; 0x1ce <__vector_11+0x64>
		default:
		PORTB =(1<<PB0);
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	88 bb       	out	0x18, r24	; 24
		//lcd_clear();
		set_pos(0,0);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	a8 df       	rcall	.-176    	; 0x118 <_Z7set_poshj>
		str_lcd("WRONG SYMBOL!");
 1c8:	83 e7       	ldi	r24, 0x73	; 115
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	ad df       	rcall	.-166    	; 0x128 <_Z7str_lcdPc>
		break;
	}
}
 1ce:	ff 91       	pop	r31
 1d0:	ef 91       	pop	r30
 1d2:	bf 91       	pop	r27
 1d4:	af 91       	pop	r26
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	7f 91       	pop	r23
 1dc:	6f 91       	pop	r22
 1de:	5f 91       	pop	r21
 1e0:	4f 91       	pop	r20
 1e2:	3f 91       	pop	r19
 1e4:	2f 91       	pop	r18
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <_Z9port_initv>:

void port_init()
{
	DDRD =0b11111110;  //rx на вход
 1f0:	8e ef       	ldi	r24, 0xFE	; 254
 1f2:	81 bb       	out	0x11, r24	; 17
	DDRC=0xFF;
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
 1f8:	15 ba       	out	0x15, r1	; 21
	DDRB=(1<<PB0);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	87 bb       	out	0x17, r24	; 23
 1fe:	08 95       	ret

00000200 <main>:
}
int main(void)
{
	port_init();
 200:	f7 df       	rcall	.-18     	; 0x1f0 <_Z9port_initv>
	uart_init();
 202:	03 d0       	rcall	.+6      	; 0x20a <_Z9uart_initv>
	lcd_init();
 204:	46 df       	rcall	.-372    	; 0x92 <_Z8lcd_initv>
	sei();
 206:	78 94       	sei
 208:	ff cf       	rjmp	.-2      	; 0x208 <main+0x8>

0000020a <_Z9uart_initv>:
}
*/
void uart_init()
{
	//разрешаем прием, передачу, прерывание по приёму
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(0<<UDRIE);
 20a:	88 e9       	ldi	r24, 0x98	; 152
 20c:	8a b9       	out	0x0a, r24	; 10
	//8 бит данных, 1 стоп бит, без контроля четности
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 20e:	86 e8       	ldi	r24, 0x86	; 134
 210:	80 bd       	out	0x20, r24	; 32
	//Baud Rate: 9600
	UBRRL = 0x33;
 212:	83 e3       	ldi	r24, 0x33	; 51
 214:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0x00;
 216:	10 bc       	out	0x20, r1	; 32
 218:	08 95       	ret

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
