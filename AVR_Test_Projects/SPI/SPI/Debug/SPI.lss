
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000028f  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e5  00000000  00000000  0000049d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000028e  00000000  00000000  00000682  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000078  00000000  00000000  00000910  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a6  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000018e  00000000  00000000  00000b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  00000cbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	64 c0       	rjmp	.+200    	; 0xf0 <spi_ind_symb+0x8e>
  28:	24 c0       	rjmp	.+72     	; 0x72 <spi_ind_symb+0x10>
  2a:	2a c0       	rjmp	.+84     	; 0x80 <spi_ind_symb+0x1e>
  2c:	30 c0       	rjmp	.+96     	; 0x8e <spi_ind_symb+0x2c>
  2e:	36 c0       	rjmp	.+108    	; 0x9c <spi_ind_symb+0x3a>
  30:	3c c0       	rjmp	.+120    	; 0xaa <spi_ind_symb+0x48>
  32:	42 c0       	rjmp	.+132    	; 0xb8 <spi_ind_symb+0x56>
  34:	48 c0       	rjmp	.+144    	; 0xc6 <spi_ind_symb+0x64>
  36:	4e c0       	rjmp	.+156    	; 0xd4 <spi_ind_symb+0x72>
  38:	54 c0       	rjmp	.+168    	; 0xe2 <spi_ind_symb+0x80>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61
  46:	5b d0       	rcall	.+182    	; 0xfe <main>
  48:	72 c0       	rjmp	.+228    	; 0x12e <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <spi_port_in>:
#include "spi.h"
void spi_port_in(void)
{
	DDRB |= ((1<<PB2)|(1<<PB3)|(1<<PB5));
  4c:	87 b3       	in	r24, 0x17	; 23
  4e:	8c 62       	ori	r24, 0x2C	; 44
  50:	87 bb       	out	0x17, r24	; 23
	PORTB &=~((1<<PB2)|(1<<PB3)|(1<<PB5));
  52:	88 b3       	in	r24, 0x18	; 24
  54:	83 7d       	andi	r24, 0xD3	; 211
  56:	88 bb       	out	0x18, r24	; 24
  58:	08 95       	ret

0000005a <spi_init>:
}

void spi_init(void)
{
	SPCR = ((1<<SPE)|(1<<MSTR));
  5a:	80 e5       	ldi	r24, 0x50	; 80
  5c:	8d b9       	out	0x0d, r24	; 13
	SPDR =0b00000000;
  5e:	1f b8       	out	0x0f, r1	; 15
  60:	08 95       	ret

00000062 <spi_ind_symb>:
	 PORTB &= ~(1<<PB2); //низкий уровень
}

void spi_ind_symb(unsigned int i)
{
	switch(i)
  62:	8a 30       	cpi	r24, 0x0A	; 10
  64:	91 05       	cpc	r25, r1
  66:	08 f0       	brcs	.+2      	; 0x6a <spi_ind_symb+0x8>
  68:	49 c0       	rjmp	.+146    	; 0xfc <spi_ind_symb+0x9a>
  6a:	fc 01       	movw	r30, r24
  6c:	ed 5e       	subi	r30, 0xED	; 237
  6e:	ff 4f       	sbci	r31, 0xFF	; 255
  70:	09 94       	ijmp
	{
		case 1:
		SPDR =~0b00000110;
  72:	89 ef       	ldi	r24, 0xF9	; 249
  74:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
  76:	77 9b       	sbis	0x0e, 7	; 14
  78:	fe cf       	rjmp	.-4      	; 0x76 <spi_ind_symb+0x14>
		PORTB |= (1<<PB2); //высокий уровень
  7a:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PB2); //низкий уровень
  7c:	c2 98       	cbi	0x18, 2	; 24
		break;
  7e:	08 95       	ret
		case 2:
		SPDR =~0b01011011;
  80:	84 ea       	ldi	r24, 0xA4	; 164
  82:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
  84:	77 9b       	sbis	0x0e, 7	; 14
  86:	fe cf       	rjmp	.-4      	; 0x84 <spi_ind_symb+0x22>
		PORTB |= (1<<PB2); //высокий уровень
  88:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PB2); //низкий уровень
  8a:	c2 98       	cbi	0x18, 2	; 24
		break;
  8c:	08 95       	ret
		case 3:
		SPDR =~0b01001111;
  8e:	80 eb       	ldi	r24, 0xB0	; 176
  90:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
  92:	77 9b       	sbis	0x0e, 7	; 14
  94:	fe cf       	rjmp	.-4      	; 0x92 <spi_ind_symb+0x30>
		PORTB |= (1<<PB2); //высокий уровень
  96:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PB2); //низкий уровень
  98:	c2 98       	cbi	0x18, 2	; 24
		break;
  9a:	08 95       	ret
		case 4:
		SPDR =~0b01100110;
  9c:	89 e9       	ldi	r24, 0x99	; 153
  9e:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
  a0:	77 9b       	sbis	0x0e, 7	; 14
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <spi_ind_symb+0x3e>
		PORTB |= (1<<PB2); //высокий уровень
  a4:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PB2); //низкий уровень
  a6:	c2 98       	cbi	0x18, 2	; 24
		break;
  a8:	08 95       	ret
		case 5:
		SPDR =~0b01101101;
  aa:	82 e9       	ldi	r24, 0x92	; 146
  ac:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
  ae:	77 9b       	sbis	0x0e, 7	; 14
  b0:	fe cf       	rjmp	.-4      	; 0xae <spi_ind_symb+0x4c>
		PORTB |= (1<<PB2); //высокий уровень
  b2:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PB2); //низкий уровень
  b4:	c2 98       	cbi	0x18, 2	; 24
		break;
  b6:	08 95       	ret
		case 6:
		SPDR =~0b01111101;
  b8:	82 e8       	ldi	r24, 0x82	; 130
  ba:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
  bc:	77 9b       	sbis	0x0e, 7	; 14
  be:	fe cf       	rjmp	.-4      	; 0xbc <spi_ind_symb+0x5a>
		PORTB |= (1<<PB2); //высокий уровень
  c0:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PB2); //низкий уровень
  c2:	c2 98       	cbi	0x18, 2	; 24
		break;
  c4:	08 95       	ret
		case 7:
		SPDR =~0b00000111;
  c6:	88 ef       	ldi	r24, 0xF8	; 248
  c8:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
  ca:	77 9b       	sbis	0x0e, 7	; 14
  cc:	fe cf       	rjmp	.-4      	; 0xca <spi_ind_symb+0x68>
		PORTB |= (1<<PB2); //высокий уровень
  ce:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PB2); //низкий уровень
  d0:	c2 98       	cbi	0x18, 2	; 24
		break;
  d2:	08 95       	ret
		case 8:
		SPDR =~0b01111111;
  d4:	80 e8       	ldi	r24, 0x80	; 128
  d6:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
  d8:	77 9b       	sbis	0x0e, 7	; 14
  da:	fe cf       	rjmp	.-4      	; 0xd8 <spi_ind_symb+0x76>
		PORTB |= (1<<PB2); //высокий уровень
  dc:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PB2); //низкий уровень
  de:	c2 98       	cbi	0x18, 2	; 24
		break;
  e0:	08 95       	ret
		case 9:
		SPDR =~0b01101111;
  e2:	80 e9       	ldi	r24, 0x90	; 144
  e4:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
  e6:	77 9b       	sbis	0x0e, 7	; 14
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <spi_ind_symb+0x84>
		PORTB |= (1<<PB2); //высокий уровень
  ea:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PB2); //низкий уровень
  ec:	c2 98       	cbi	0x18, 2	; 24
		break;
  ee:	08 95       	ret
		case 0:
		SPDR =~0b00111111;
  f0:	80 ec       	ldi	r24, 0xC0	; 192
  f2:	8f b9       	out	0x0f, r24	; 15
		while(!(SPSR & (1<<SPIF)));
  f4:	77 9b       	sbis	0x0e, 7	; 14
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <spi_ind_symb+0x92>
		PORTB |= (1<<PB2); //высокий уровень
  f8:	c2 9a       	sbi	0x18, 2	; 24
		PORTB &= ~(1<<PB2); //низкий уровень
  fa:	c2 98       	cbi	0x18, 2	; 24
  fc:	08 95       	ret

000000fe <main>:
#include "main.h"

int main(void)
{
	spi_port_in();
  fe:	a6 df       	rcall	.-180    	; 0x4c <spi_port_in>
	spi_init();
 100:	ac df       	rcall	.-168    	; 0x5a <spi_init>
	_delay_ms(2000);
	*/
	//spi_send();
    while(1)
    {
		for(int i=0; i<10; i++)
 102:	c0 e0       	ldi	r28, 0x00	; 0
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	00 e0       	ldi	r16, 0x00	; 0
 108:	10 e0       	ldi	r17, 0x00	; 0
		{
			spi_ind_symb(i);
 10a:	ce 01       	movw	r24, r28
 10c:	aa df       	rcall	.-172    	; 0x62 <spi_ind_symb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	84 e3       	ldi	r24, 0x34	; 52
 112:	9c e0       	ldi	r25, 0x0C	; 12
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x16>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x20>
 11e:	00 00       	nop
	_delay_ms(2000);
	*/
	//spi_send();
    while(1)
    {
		for(int i=0; i<10; i++)
 120:	21 96       	adiw	r28, 0x01	; 1
 122:	ca 30       	cpi	r28, 0x0A	; 10
 124:	d1 05       	cpc	r29, r1
 126:	8c f3       	brlt	.-30     	; 0x10a <main+0xc>
 128:	c0 2f       	mov	r28, r16
 12a:	d1 2f       	mov	r29, r17
 12c:	ee cf       	rjmp	.-36     	; 0x10a <main+0xc>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
