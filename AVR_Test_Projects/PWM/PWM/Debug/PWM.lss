
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000024f  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000148  00000000  00000000  000003bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001b2  00000000  00000000  00000505  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001cb  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000011e  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  000009f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	34 c0       	rjmp	.+104    	; 0x9e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:

#include "pwm.h"

int main(void)
{
	port_init();
  38:	2f d0       	rcall	.+94     	; 0x98 <_Z9port_initv>
	init_PWM_timer();
  3a:	26 d0       	rcall	.+76     	; 0x88 <_Z14init_PWM_timerv>
    while(1)
    {
		for(int i=0; i<255; i++)
  3c:	80 e0       	ldi	r24, 0x00	; 0
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	4f ef       	ldi	r20, 0xFF	; 255
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	60 e0       	ldi	r22, 0x00	; 0
  46:	50 e0       	ldi	r21, 0x00	; 0
  48:	0d c0       	rjmp	.+26     	; 0x64 <__SREG__+0x25>
		{
			OCR2++;
  4a:	23 b5       	in	r18, 0x23	; 35
  4c:	2f 5f       	subi	r18, 0xFF	; 255
  4e:	23 bd       	out	0x23, r18	; 35
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	ef e6       	ldi	r30, 0x6F	; 111
  52:	f7 e1       	ldi	r31, 0x17	; 23
  54:	31 97       	sbiw	r30, 0x01	; 1
  56:	f1 f7       	brne	.-4      	; 0x54 <__SREG__+0x15>
  58:	00 c0       	rjmp	.+0      	; 0x5a <__SREG__+0x1b>
  5a:	00 00       	nop
{
	port_init();
	init_PWM_timer();
    while(1)
    {
		for(int i=0; i<255; i++)
  5c:	01 96       	adiw	r24, 0x01	; 1
  5e:	02 c0       	rjmp	.+4      	; 0x64 <__SREG__+0x25>
  60:	86 2f       	mov	r24, r22
  62:	95 2f       	mov	r25, r21
  64:	8f 3f       	cpi	r24, 0xFF	; 255
  66:	91 05       	cpc	r25, r1
  68:	84 f3       	brlt	.-32     	; 0x4a <__SREG__+0xb>
  6a:	84 2f       	mov	r24, r20
  6c:	93 2f       	mov	r25, r19
			OCR2++;
			_delay_ms(3);
		}
		for(int i=254; i>=0; i--)
		{
			OCR2--;
  6e:	23 b5       	in	r18, 0x23	; 35
  70:	21 50       	subi	r18, 0x01	; 1
  72:	23 bd       	out	0x23, r18	; 35
  74:	ef e6       	ldi	r30, 0x6F	; 111
  76:	f7 e1       	ldi	r31, 0x17	; 23
  78:	31 97       	sbiw	r30, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <__SREG__+0x39>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <__SREG__+0x3f>
  7e:	00 00       	nop
  80:	01 97       	sbiw	r24, 0x01	; 1
		for(int i=0; i<255; i++)
		{
			OCR2++;
			_delay_ms(3);
		}
		for(int i=254; i>=0; i--)
  82:	00 97       	sbiw	r24, 0x00	; 0
  84:	a1 f7       	brne	.-24     	; 0x6e <__SREG__+0x2f>
  86:	ec cf       	rjmp	.-40     	; 0x60 <__SREG__+0x21>

00000088 <_Z14init_PWM_timerv>:
﻿#include "pwm.h"

void init_PWM_timer(void)
{
	ASSR=0x00;
  88:	12 bc       	out	0x22, r1	; 34
	TCCR2=0b01101110; //Fast PWM, Clear OC2 on Compare Match, clkT2S/256 (From prescaler) (реальная частота получится 8мгц/256 = 31250 гц)
  8a:	8e e6       	ldi	r24, 0x6E	; 110
  8c:	85 bd       	out	0x25, r24	; 37
	TCNT2=0x00; // Timer Value = 0
  8e:	14 bc       	out	0x24, r1	; 36
	OCR2=0x00; //Output Compare Register = 0 - в нашем случае это скважность шим (0 - это 0, а FF - 100 %)
  90:	13 bc       	out	0x23, r1	; 35
	TIMSK|=0x00;//
  92:	89 b7       	in	r24, 0x39	; 57
  94:	89 bf       	out	0x39, r24	; 57
  96:	08 95       	ret

00000098 <_Z9port_initv>:
}

void port_init(void)
{
	PORTB=0x00;
  98:	18 ba       	out	0x18, r1	; 24
	DDRB |= 1<<PB3;
  9a:	bb 9a       	sbi	0x17, 3	; 23
  9c:	08 95       	ret

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
