
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000090  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000033d  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e0  00000000  00000000  00000505  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000299  00000000  00000000  000006e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000cc  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000019f  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000045  00000000  00000000  00000beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	3d c0       	rjmp	.+122    	; 0xb0 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include "main.h"

int main(void)
{
	twi_init();
  38:	1c d0       	rcall	.+56     	; 0x72 <twi_init>
	uart_init();
  3a:	2e d0       	rcall	.+92     	; 0x98 <uart_init>
	//twi_start_cond();
	//uart_transmit(TWSR);
	//uart_transmit('h');
	int i = TWSR;
  3c:	81 b1       	in	r24, 0x01	; 1
	uart_transmit_num(i);
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	33 d0       	rcall	.+102    	; 0xa8 <uart_transmit_num>
	twi_start_cond(); //Отправим условие START
  42:	1a d0       	rcall	.+52     	; 0x78 <twi_start_cond>
	uart_transmit_num(TWSR); //читаем статусный регистр
  44:	81 b1       	in	r24, 0x01	; 1
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	2f d0       	rcall	.+94     	; 0xa8 <uart_transmit_num>
	twi_send_byte(0b10100000); //передаем адрес и бит записи (0)
  4a:	80 ea       	ldi	r24, 0xA0	; 160
  4c:	1e d0       	rcall	.+60     	; 0x8a <twi_send_byte>
	uart_transmit_num(TWSR); //читаем статусный регистр
  4e:	81 b1       	in	r24, 0x01	; 1
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	2a d0       	rcall	.+84     	; 0xa8 <uart_transmit_num>
	twi_send_byte(0);//переходим на 0x0000 – старший байт адреса памяти
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	19 d0       	rcall	.+50     	; 0x8a <twi_send_byte>
	uart_transmit_num(TWSR); //читаем статусный регистр
  58:	81 b1       	in	r24, 0x01	; 1
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	25 d0       	rcall	.+74     	; 0xa8 <uart_transmit_num>
	twi_send_byte(0); // – младший байт адреса памяти
  5e:	80 e0       	ldi	r24, 0x00	; 0
  60:	14 d0       	rcall	.+40     	; 0x8a <twi_send_byte>
	uart_transmit_num(TWSR); //читаем статусный регистр
  62:	81 b1       	in	r24, 0x01	; 1
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	20 d0       	rcall	.+64     	; 0xa8 <uart_transmit_num>
	twi_stop_cond(); //Отправим условие STOP
  68:	0d d0       	rcall	.+26     	; 0x84 <twi_stop_cond>
	uart_transmit_num(TWSR); //читаем статусный регистр
  6a:	81 b1       	in	r24, 0x01	; 1
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	1c d0       	rcall	.+56     	; 0xa8 <uart_transmit_num>
  70:	ff cf       	rjmp	.-2      	; 0x70 <__SREG__+0x31>

00000072 <twi_init>:
#include "twi.h"

void twi_init(void)
{
	TWBR = 0x20;
  72:	80 e2       	ldi	r24, 0x20	; 32
  74:	80 b9       	out	0x00, r24	; 0
  76:	08 95       	ret

00000078 <twi_start_cond>:
}
void twi_start_cond(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  78:	84 ea       	ldi	r24, 0xA4	; 164
  7a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&&(1<<TWINT)));
  7c:	86 b7       	in	r24, 0x36	; 54
  7e:	88 23       	and	r24, r24
  80:	e9 f3       	breq	.-6      	; 0x7c <twi_start_cond+0x4>
}
  82:	08 95       	ret

00000084 <twi_stop_cond>:

void twi_stop_cond(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  84:	84 ea       	ldi	r24, 0xA4	; 164
  86:	86 bf       	out	0x36, r24	; 54
  88:	08 95       	ret

0000008a <twi_send_byte>:
}

void twi_send_byte(unsigned char c)
{
	TWDR = c;//запишем байт в регистр данных
  8a:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);//включим передачу байта
  8c:	84 e8       	ldi	r24, 0x84	; 132
  8e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//подождем пока установится TWIN
  90:	06 b6       	in	r0, 0x36	; 54
  92:	07 fe       	sbrs	r0, 7
  94:	fd cf       	rjmp	.-6      	; 0x90 <twi_send_byte+0x6>
}
  96:	08 95       	ret

00000098 <uart_init>:
}

void uart_init()
{
	//разрешаем прием, передачу, прерывание по приёму
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(0<<UDRIE);
  98:	88 e9       	ldi	r24, 0x98	; 152
  9a:	8a b9       	out	0x0a, r24	; 10
	//8 бит данных, 1 стоп бит, без контроля четности
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  9c:	86 e8       	ldi	r24, 0x86	; 134
  9e:	80 bd       	out	0x20, r24	; 32
	//Baud Rate: 9600
	UBRRL = 0x33;
  a0:	83 e3       	ldi	r24, 0x33	; 51
  a2:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0x00;
  a4:	10 bc       	out	0x20, r1	; 32
  a6:	08 95       	ret

000000a8 <uart_transmit_num>:
	UDR = data;
}

void uart_transmit_num(unsigned int num)
{
	while (!(UCSRA & (1<<UDRE)));
  a8:	5d 9b       	sbis	0x0b, 5	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <uart_transmit_num>
	UDR = num;
  ac:	8c b9       	out	0x0c, r24	; 12
  ae:	08 95       	ret

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
