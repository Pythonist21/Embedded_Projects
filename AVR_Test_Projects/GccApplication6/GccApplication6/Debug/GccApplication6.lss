
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000054  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000a8  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  000000d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000017d  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000115  00000000  00000000  0000027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000015b  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001c5  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000018  00000000  00000000  000006e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	18 c0       	rjmp	.+48     	; 0x50 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:
#define F_CPU 1200000
#include <avr/io.h>
#include <util/delay.h>
void port_init()
{
	DDRB=0xFF;
  22:	8f ef       	ldi	r24, 0xFF	; 255
  24:	87 bb       	out	0x17, r24	; 23
int main(void)
{
	port_init();
    while(1)
    {
        PORTB =0xFF;
  26:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  28:	2f eb       	ldi	r18, 0xBF	; 191
  2a:	34 ed       	ldi	r19, 0xD4	; 212
  2c:	91 e0       	ldi	r25, 0x01	; 1
  2e:	21 50       	subi	r18, 0x01	; 1
  30:	30 40       	sbci	r19, 0x00	; 0
  32:	90 40       	sbci	r25, 0x00	; 0
  34:	e1 f7       	brne	.-8      	; 0x2e <main+0xc>
  36:	00 c0       	rjmp	.+0      	; 0x38 <main+0x16>
  38:	00 00       	nop
		_delay_ms(500);
		PORTB = 0x00;
  3a:	18 ba       	out	0x18, r1	; 24
  3c:	2f eb       	ldi	r18, 0xBF	; 191
  3e:	34 ed       	ldi	r19, 0xD4	; 212
  40:	91 e0       	ldi	r25, 0x01	; 1
  42:	21 50       	subi	r18, 0x01	; 1
  44:	30 40       	sbci	r19, 0x00	; 0
  46:	90 40       	sbci	r25, 0x00	; 0
  48:	e1 f7       	brne	.-8      	; 0x42 <__SREG__+0x3>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <__SREG__+0xd>
  4c:	00 00       	nop
  4e:	eb cf       	rjmp	.-42     	; 0x26 <main+0x4>

00000050 <_exit>:
  50:	f8 94       	cli

00000052 <__stop_program>:
  52:	ff cf       	rjmp	.-2      	; 0x52 <__stop_program>
