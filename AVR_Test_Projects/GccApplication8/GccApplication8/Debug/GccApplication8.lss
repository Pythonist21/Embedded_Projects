
GccApplication8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  0000025c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000048  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000025a  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000019f  00000000  00000000  0000052e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001ba  00000000  00000000  000006cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000bc  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000021f  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000229  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	4d c0       	rjmp	.+154    	; 0xa8 <__vector_6>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	3d c0       	rjmp	.+122    	; 0xa2 <_Z7segcharh+0x46>
  28:	21 c0       	rjmp	.+66     	; 0x6c <_Z7segcharh+0x10>
  2a:	23 c0       	rjmp	.+70     	; 0x72 <_Z7segcharh+0x16>
  2c:	25 c0       	rjmp	.+74     	; 0x78 <_Z7segcharh+0x1c>
  2e:	27 c0       	rjmp	.+78     	; 0x7e <_Z7segcharh+0x22>
  30:	29 c0       	rjmp	.+82     	; 0x84 <_Z7segcharh+0x28>
  32:	2b c0       	rjmp	.+86     	; 0x8a <_Z7segcharh+0x2e>
  34:	2d c0       	rjmp	.+90     	; 0x90 <_Z7segcharh+0x34>
  36:	2f c0       	rjmp	.+94     	; 0x96 <_Z7segcharh+0x3a>
  38:	31 c0       	rjmp	.+98     	; 0x9c <_Z7segcharh+0x40>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_clear_bss>:
  46:	20 e0       	ldi	r18, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	01 c0       	rjmp	.+2      	; 0x50 <.do_clear_bss_start>

0000004e <.do_clear_bss_loop>:
  4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
  50:	a3 36       	cpi	r26, 0x63	; 99
  52:	b2 07       	cpc	r27, r18
  54:	e1 f7       	brne	.-8      	; 0x4e <.do_clear_bss_loop>
  56:	a1 d0       	rcall	.+322    	; 0x19a <main>
  58:	c5 c0       	rjmp	.+394    	; 0x1e4 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <_Z7segcharh>:
unsigned char R1=0,R2=0;
unsigned char n_count=0; 

void segchar(unsigned char seg)
{
	switch (seg)
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	8a 30       	cpi	r24, 0x0A	; 10
  60:	91 05       	cpc	r25, r1
  62:	08 f5       	brcc	.+66     	; 0xa6 <_Z7segcharh+0x4a>
  64:	fc 01       	movw	r30, r24
  66:	ed 5e       	subi	r30, 0xED	; 237
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	09 94       	ijmp
	{
		case 1: PORTD = 0b11111001; break;
  6c:	89 ef       	ldi	r24, 0xF9	; 249
  6e:	82 bb       	out	0x12, r24	; 18
  70:	08 95       	ret
		case 2: PORTD = 0b10100100; break;
  72:	84 ea       	ldi	r24, 0xA4	; 164
  74:	82 bb       	out	0x12, r24	; 18
  76:	08 95       	ret
		case 3: PORTD = 0b10110000; break;
  78:	80 eb       	ldi	r24, 0xB0	; 176
  7a:	82 bb       	out	0x12, r24	; 18
  7c:	08 95       	ret
		case 4: PORTD = 0b10011001; break;
  7e:	89 e9       	ldi	r24, 0x99	; 153
  80:	82 bb       	out	0x12, r24	; 18
  82:	08 95       	ret
		case 5: PORTD = 0b10010010; break;
  84:	82 e9       	ldi	r24, 0x92	; 146
  86:	82 bb       	out	0x12, r24	; 18
  88:	08 95       	ret
		case 6: PORTD = 0b10000010; break;
  8a:	82 e8       	ldi	r24, 0x82	; 130
  8c:	82 bb       	out	0x12, r24	; 18
  8e:	08 95       	ret
		case 7: PORTD = 0b11111000; break;
  90:	88 ef       	ldi	r24, 0xF8	; 248
  92:	82 bb       	out	0x12, r24	; 18
  94:	08 95       	ret
		case 8: PORTD = 0b10000000; break;
  96:	80 e8       	ldi	r24, 0x80	; 128
  98:	82 bb       	out	0x12, r24	; 18
  9a:	08 95       	ret
		case 9: PORTD = 0b10010000; break;
  9c:	80 e9       	ldi	r24, 0x90	; 144
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	08 95       	ret
		case 0: PORTD = 0b11000000; break;
  a2:	80 ec       	ldi	r24, 0xC0	; 192
  a4:	82 bb       	out	0x12, r24	; 18
  a6:	08 95       	ret

000000a8 <__vector_6>:
	}
}

ISR(TIMER1_COMPA_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	 if(n_count==0)
  ca:	80 91 60 00 	lds	r24, 0x0060
  ce:	81 11       	cpse	r24, r1
  d0:	06 c0       	rjmp	.+12     	; 0xde <__vector_6+0x36>
	 {
		 PORTB =0x00;
  d2:	18 ba       	out	0x18, r1	; 24
		 PORTB &=~(1<<PB0);
  d4:	c0 98       	cbi	0x18, 0	; 24
		 PORTB |=(1<<PB1);
  d6:	c1 9a       	sbi	0x18, 1	; 24
		 segchar(R1);
  d8:	80 91 62 00 	lds	r24, 0x0062
  dc:	bf df       	rcall	.-130    	; 0x5c <_Z7segcharh>
	 }
	 if(n_count==1)
  de:	80 91 60 00 	lds	r24, 0x0060
  e2:	81 30       	cpi	r24, 0x01	; 1
  e4:	31 f4       	brne	.+12     	; 0xf2 <__vector_6+0x4a>
	 {
		 PORTB =0x00;
  e6:	18 ba       	out	0x18, r1	; 24
		 PORTB &=~(1<<PB1);
  e8:	c1 98       	cbi	0x18, 1	; 24
		 PORTB|=(1<<PORTB0);
  ea:	c0 9a       	sbi	0x18, 0	; 24
		 segchar(R2);
  ec:	80 91 61 00 	lds	r24, 0x0061
  f0:	b5 df       	rcall	.-150    	; 0x5c <_Z7segcharh>
	 } 
	 n_count++;
  f2:	80 91 60 00 	lds	r24, 0x0060
  f6:	8f 5f       	subi	r24, 0xFF	; 255
	 if(n_count>1)
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	18 f4       	brcc	.+6      	; 0x102 <__vector_6+0x5a>
		 PORTB =0x00;
		 PORTB &=~(1<<PB1);
		 PORTB|=(1<<PORTB0);
		 segchar(R2);
	 } 
	 n_count++;
  fc:	80 93 60 00 	sts	0x0060, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <__vector_6+0x5e>
	 if(n_count>1)
	 {
		 n_count=0;
 102:	10 92 60 00 	sts	0x0060, r1
	 }
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <_Z9port_initv>:

void port_init()
{
	DDRB |= 1<<PB0 | 1<<PB1;
 128:	87 b3       	in	r24, 0x17	; 23
 12a:	83 60       	ori	r24, 0x03	; 3
 12c:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	81 bb       	out	0x11, r24	; 17
 132:	08 95       	ret

00000134 <_Z10timer_initv>:
}

void timer_init()
{
	TCCR1B |=(1<<WGM12);
 134:	8e b5       	in	r24, 0x2e	; 46
 136:	88 60       	ori	r24, 0x08	; 8
 138:	8e bd       	out	0x2e, r24	; 46
	TIMSK |=(1<<OCIE1A);
 13a:	89 b7       	in	r24, 0x39	; 57
 13c:	80 61       	ori	r24, 0x10	; 16
 13e:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b10000000; //записываем в регистр число для сравнения
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b00000000;
 144:	1a bc       	out	0x2a, r1	; 42
	TCCR1B |=(1<<CS11);
 146:	8e b5       	in	r24, 0x2e	; 46
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	8e bd       	out	0x2e, r24	; 46
 14c:	08 95       	ret

0000014e <_Z9led_printj>:
}

void led_print(unsigned int number)
{
 14e:	ac 01       	movw	r20, r24
	 R1 = number%10;
 150:	9c 01       	movw	r18, r24
 152:	ad ec       	ldi	r26, 0xCD	; 205
 154:	bc ec       	ldi	r27, 0xCC	; 204
 156:	3a d0       	rcall	.+116    	; 0x1cc <__umulhisi3>
 158:	96 95       	lsr	r25
 15a:	87 95       	ror	r24
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	9c 01       	movw	r18, r24
 166:	22 0f       	add	r18, r18
 168:	33 1f       	adc	r19, r19
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	82 0f       	add	r24, r18
 178:	93 1f       	adc	r25, r19
 17a:	9a 01       	movw	r18, r20
 17c:	28 1b       	sub	r18, r24
 17e:	39 0b       	sbc	r19, r25
 180:	20 93 62 00 	sts	0x0062, r18
	 R2 = number/10;
 184:	9a 01       	movw	r18, r20
 186:	22 d0       	rcall	.+68     	; 0x1cc <__umulhisi3>
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	80 93 61 00 	sts	0x0061, r24
 198:	08 95       	ret

0000019a <main>:
}

int main(void)
{
	port_init();
 19a:	c6 df       	rcall	.-116    	; 0x128 <_Z9port_initv>
	timer_init();
 19c:	cb df       	rcall	.-106    	; 0x134 <_Z10timer_initv>
	sei();
 19e:	78 94       	sei
    while(1)
    {
       for(int i=0; i<100; i++)
 1a0:	c0 e0       	ldi	r28, 0x00	; 0
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
 1a4:	00 e0       	ldi	r16, 0x00	; 0
 1a6:	10 e0       	ldi	r17, 0x00	; 0
	   {
		   led_print(i);
 1a8:	ce 01       	movw	r24, r28
 1aa:	d1 df       	rcall	.-94     	; 0x14e <_Z9led_printj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	84 e3       	ldi	r24, 0x34	; 52
 1b0:	9c e0       	ldi	r25, 0x0C	; 12
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0x18>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x22>
 1bc:	00 00       	nop
	port_init();
	timer_init();
	sei();
    while(1)
    {
       for(int i=0; i<100; i++)
 1be:	21 96       	adiw	r28, 0x01	; 1
 1c0:	c4 36       	cpi	r28, 0x64	; 100
 1c2:	d1 05       	cpc	r29, r1
 1c4:	8c f3       	brlt	.-30     	; 0x1a8 <main+0xe>
 1c6:	c0 2f       	mov	r28, r16
 1c8:	d1 2f       	mov	r29, r17
 1ca:	ee cf       	rjmp	.-36     	; 0x1a8 <main+0xe>

000001cc <__umulhisi3>:
 1cc:	a2 9f       	mul	r26, r18
 1ce:	b0 01       	movw	r22, r0
 1d0:	b3 9f       	mul	r27, r19
 1d2:	c0 01       	movw	r24, r0
 1d4:	a3 9f       	mul	r26, r19
 1d6:	01 d0       	rcall	.+2      	; 0x1da <__umulhisi3+0xe>
 1d8:	b2 9f       	mul	r27, r18
 1da:	70 0d       	add	r23, r0
 1dc:	81 1d       	adc	r24, r1
 1de:	11 24       	eor	r1, r1
 1e0:	91 1d       	adc	r25, r1
 1e2:	08 95       	ret

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
