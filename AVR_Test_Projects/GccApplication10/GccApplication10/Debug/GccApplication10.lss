
GccApplication10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000003aa  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006a  0080006a  00000448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004f4  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e0  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d7  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00000fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000203  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000324  00000000  00000000  000012d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000015f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ea       	ldi	r30, 0xAA	; 170
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 37       	cpi	r26, 0x70	; 112
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	67 d0       	rcall	.+206    	; 0x128 <main>
  5a:	a5 c1       	rjmp	.+842    	; 0x3a6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <port_init>:
}
*/

void port_init()
{
	DDRD =(0<<PD0);  //rx на вход
  5e:	11 ba       	out	0x11, r1	; 17
	DDRD = (1<<PD1);    //tx на выход
  60:	82 e0       	ldi	r24, 0x02	; 2
  62:	81 bb       	out	0x11, r24	; 17
	DDRC=0xFF;
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
  68:	15 ba       	out	0x15, r1	; 21
	DDRB=(1<<PB0);
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	87 bb       	out	0x17, r24	; 23
  6e:	08 95       	ret

00000070 <uart_init>:
}

void uart_init()
{
	//разрешаем прием, передачу, прерывание по приЄму
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(0<<UDRIE);
  70:	88 e9       	ldi	r24, 0x98	; 152
  72:	8a b9       	out	0x0a, r24	; 10
	//8 бит данных, 1 стоп бит, без контрол€ четности
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
	//Baud Rate: 9600
	UBRRL = 0x33;
  78:	83 e3       	ldi	r24, 0x33	; 51
  7a:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0x00;
  7c:	10 bc       	out	0x20, r1	; 32
  7e:	08 95       	ret

00000080 <uart_transmit>:
}

void uart_transmit(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)));
  80:	5d 9b       	sbis	0x0b, 5	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <uart_transmit>
	UDR = data;
  84:	8c b9       	out	0x0c, r24	; 12
  86:	08 95       	ret

00000088 <EEPROM_write>:
#include "eeprom.h"
int *p;
void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
  88:	e1 99       	sbic	0x1c, 1	; 28
  8a:	fe cf       	rjmp	.-4      	; 0x88 <EEPROM_write>
	{}
	/* Set up address and data registers */
	EEAR = uiAddress;
  8c:	9f bb       	out	0x1f, r25	; 31
  8e:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  90:	6d bb       	out	0x1d, r22	; 29
	//*p=ucData;
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE); /* Start eeprom write by setting EEWE */
  92:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEWE);
  94:	e1 9a       	sbi	0x1c, 1	; 28
  96:	08 95       	ret

00000098 <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
	while(EECR & (1<<EEWE))
  98:	e1 99       	sbic	0x1c, 1	; 28
  9a:	fe cf       	rjmp	.-4      	; 0x98 <EEPROM_read>
	{} //ждем освобождени€ флага окончани€ последней операцией с пам€тью
	EEAR = uiAddress; //”станавливаем адрес
  9c:	9f bb       	out	0x1f, r25	; 31
  9e:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE); //«апускаем операцию считывани€ из пам€ти в регистр данных
  a0:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR; //¬озвращаем результат
  a2:	8d b3       	in	r24, 0x1d	; 29
}
  a4:	08 95       	ret

000000a6 <EEPROM_write_string>:

void EEPROM_write_string(unsigned int uiAddress, char mas[])
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
  b0:	eb 01       	movw	r28, r22
	int lenght =sizeof(mas)/sizeof(mas[0]);
	*p=lenght;
  b2:	e0 91 6a 00 	lds	r30, 0x006A
  b6:	f0 91 6b 00 	lds	r31, 0x006B
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	91 83       	std	Z+1, r25	; 0x01
  c0:	80 83       	st	Z, r24
	for(int i=0; i<lenght; i++)
	{
		EEPROM_write(uiAddress+i, mas[i]);
  c2:	68 81       	ld	r22, Y
  c4:	c8 01       	movw	r24, r16
  c6:	e0 df       	rcall	.-64     	; 0x88 <EEPROM_write>
  c8:	69 81       	ldd	r22, Y+1	; 0x01
  ca:	c8 01       	movw	r24, r16
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	dc df       	rcall	.-72     	; 0x88 <EEPROM_write>
	}
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	1f 91       	pop	r17
  d6:	0f 91       	pop	r16
  d8:	08 95       	ret

000000da <EEPROM_read_string>:
	dt += EEPROM_read(uiAddress);
	return dt;
}

const char* EEPROM_read_string(unsigned int uiAddress, unsigned int cs)
{
  da:	cf 92       	push	r12
  dc:	df 92       	push	r13
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	8c 01       	movw	r16, r24
  ec:	7b 01       	movw	r14, r22
	//unsigned int cs=6;
	//unsigned int sz=*p;
	char* str1=NULL;
	str1 = malloc(sizeof(char)*cs);
  ee:	cb 01       	movw	r24, r22
  f0:	33 d0       	rcall	.+102    	; 0x158 <malloc>
  f2:	6c 01       	movw	r12, r24
	for(unsigned int i=0; i<cs; i++)
  f4:	e1 14       	cp	r14, r1
  f6:	f1 04       	cpc	r15, r1
  f8:	69 f0       	breq	.+26     	; 0x114 <EEPROM_read_string+0x3a>
  fa:	e8 0e       	add	r14, r24
  fc:	f9 1e       	adc	r15, r25
  fe:	ec 01       	movw	r28, r24
 100:	08 1b       	sub	r16, r24
 102:	19 0b       	sbc	r17, r25
	{
		str1[i]=EEPROM_read(uiAddress +i);
 104:	c8 01       	movw	r24, r16
 106:	8c 0f       	add	r24, r28
 108:	9d 1f       	adc	r25, r29
 10a:	c6 df       	rcall	.-116    	; 0x98 <EEPROM_read>
 10c:	89 93       	st	Y+, r24
{
	//unsigned int cs=6;
	//unsigned int sz=*p;
	char* str1=NULL;
	str1 = malloc(sizeof(char)*cs);
	for(unsigned int i=0; i<cs; i++)
 10e:	ce 15       	cp	r28, r14
 110:	df 05       	cpc	r29, r15
 112:	c1 f7       	brne	.-16     	; 0x104 <EEPROM_read_string+0x2a>
	{
		str1[i]=EEPROM_read(uiAddress +i);
	}
	return str1;
}
 114:	c6 01       	movw	r24, r12
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	08 95       	ret

00000128 <main>:
#include "eeprom.h"
#include "uart.h"

int main(void)
{
	port_init();
 128:	9a df       	rcall	.-204    	; 0x5e <port_init>
	uart_init();
 12a:	a2 df       	rcall	.-188    	; 0x70 <uart_init>
	//unsigned char dat = EEPROM_read(1) ;
	//EEPROM_write_word(1, 30000);
	//uint16_t c = EEPROM_read_word(1);
	//uart_transmit(c);
	//uart_transmit(dat);
	EEPROM_write_string(1, "Per");
 12c:	66 e6       	ldi	r22, 0x66	; 102
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	b8 df       	rcall	.-144    	; 0xa6 <EEPROM_write_string>
	const char *mas = EEPROM_read_string(1, 6);
 136:	66 e0       	ldi	r22, 0x06	; 6
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	cd df       	rcall	.-102    	; 0xda <EEPROM_read_string>
 140:	8c 01       	movw	r16, r24
	EEPROM_write(4, 'o');
	EEPROM_write(5, 'n');
	const char *mas = EEPROM_read_string(1, 6);
	//unsigned int z=sizeof(mas)/sizeof(mas[0]);
	*/
	for(int i=0; i<6; i++)
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	d0 e0       	ldi	r29, 0x00	; 0
	{
		uart_transmit(mas[i]);
 146:	f8 01       	movw	r30, r16
 148:	81 91       	ld	r24, Z+
 14a:	8f 01       	movw	r16, r30
 14c:	99 df       	rcall	.-206    	; 0x80 <uart_transmit>
	EEPROM_write(4, 'o');
	EEPROM_write(5, 'n');
	const char *mas = EEPROM_read_string(1, 6);
	//unsigned int z=sizeof(mas)/sizeof(mas[0]);
	*/
	for(int i=0; i<6; i++)
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	c6 30       	cpi	r28, 0x06	; 6
 152:	d1 05       	cpc	r29, r1
 154:	c1 f7       	brne	.-16     	; 0x146 <main+0x1e>
 156:	ff cf       	rjmp	.-2      	; 0x156 <main+0x2e>

00000158 <malloc>:
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	91 05       	cpc	r25, r1
 160:	10 f4       	brcc	.+4      	; 0x166 <malloc+0xe>
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	e0 91 6e 00 	lds	r30, 0x006E
 16a:	f0 91 6f 00 	lds	r31, 0x006F
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	a0 e0       	ldi	r26, 0x00	; 0
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	30 97       	sbiw	r30, 0x00	; 0
 178:	39 f1       	breq	.+78     	; 0x1c8 <malloc+0x70>
 17a:	40 81       	ld	r20, Z
 17c:	51 81       	ldd	r21, Z+1	; 0x01
 17e:	48 17       	cp	r20, r24
 180:	59 07       	cpc	r21, r25
 182:	b8 f0       	brcs	.+46     	; 0x1b2 <malloc+0x5a>
 184:	48 17       	cp	r20, r24
 186:	59 07       	cpc	r21, r25
 188:	71 f4       	brne	.+28     	; 0x1a6 <malloc+0x4e>
 18a:	82 81       	ldd	r24, Z+2	; 0x02
 18c:	93 81       	ldd	r25, Z+3	; 0x03
 18e:	10 97       	sbiw	r26, 0x00	; 0
 190:	29 f0       	breq	.+10     	; 0x19c <malloc+0x44>
 192:	13 96       	adiw	r26, 0x03	; 3
 194:	9c 93       	st	X, r25
 196:	8e 93       	st	-X, r24
 198:	12 97       	sbiw	r26, 0x02	; 2
 19a:	2c c0       	rjmp	.+88     	; 0x1f4 <malloc+0x9c>
 19c:	90 93 6f 00 	sts	0x006F, r25
 1a0:	80 93 6e 00 	sts	0x006E, r24
 1a4:	27 c0       	rjmp	.+78     	; 0x1f4 <malloc+0x9c>
 1a6:	21 15       	cp	r18, r1
 1a8:	31 05       	cpc	r19, r1
 1aa:	31 f0       	breq	.+12     	; 0x1b8 <malloc+0x60>
 1ac:	42 17       	cp	r20, r18
 1ae:	53 07       	cpc	r21, r19
 1b0:	18 f0       	brcs	.+6      	; 0x1b8 <malloc+0x60>
 1b2:	a9 01       	movw	r20, r18
 1b4:	db 01       	movw	r26, r22
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <malloc+0x62>
 1b8:	ef 01       	movw	r28, r30
 1ba:	9a 01       	movw	r18, r20
 1bc:	bd 01       	movw	r22, r26
 1be:	df 01       	movw	r26, r30
 1c0:	02 80       	ldd	r0, Z+2	; 0x02
 1c2:	f3 81       	ldd	r31, Z+3	; 0x03
 1c4:	e0 2d       	mov	r30, r0
 1c6:	d7 cf       	rjmp	.-82     	; 0x176 <malloc+0x1e>
 1c8:	21 15       	cp	r18, r1
 1ca:	31 05       	cpc	r19, r1
 1cc:	f9 f0       	breq	.+62     	; 0x20c <malloc+0xb4>
 1ce:	28 1b       	sub	r18, r24
 1d0:	39 0b       	sbc	r19, r25
 1d2:	24 30       	cpi	r18, 0x04	; 4
 1d4:	31 05       	cpc	r19, r1
 1d6:	80 f4       	brcc	.+32     	; 0x1f8 <malloc+0xa0>
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	9b 81       	ldd	r25, Y+3	; 0x03
 1dc:	61 15       	cp	r22, r1
 1de:	71 05       	cpc	r23, r1
 1e0:	21 f0       	breq	.+8      	; 0x1ea <malloc+0x92>
 1e2:	fb 01       	movw	r30, r22
 1e4:	93 83       	std	Z+3, r25	; 0x03
 1e6:	82 83       	std	Z+2, r24	; 0x02
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <malloc+0x9a>
 1ea:	90 93 6f 00 	sts	0x006F, r25
 1ee:	80 93 6e 00 	sts	0x006E, r24
 1f2:	fe 01       	movw	r30, r28
 1f4:	32 96       	adiw	r30, 0x02	; 2
 1f6:	44 c0       	rjmp	.+136    	; 0x280 <malloc+0x128>
 1f8:	fe 01       	movw	r30, r28
 1fa:	e2 0f       	add	r30, r18
 1fc:	f3 1f       	adc	r31, r19
 1fe:	81 93       	st	Z+, r24
 200:	91 93       	st	Z+, r25
 202:	22 50       	subi	r18, 0x02	; 2
 204:	31 09       	sbc	r19, r1
 206:	39 83       	std	Y+1, r19	; 0x01
 208:	28 83       	st	Y, r18
 20a:	3a c0       	rjmp	.+116    	; 0x280 <malloc+0x128>
 20c:	20 91 6c 00 	lds	r18, 0x006C
 210:	30 91 6d 00 	lds	r19, 0x006D
 214:	23 2b       	or	r18, r19
 216:	41 f4       	brne	.+16     	; 0x228 <malloc+0xd0>
 218:	20 91 62 00 	lds	r18, 0x0062
 21c:	30 91 63 00 	lds	r19, 0x0063
 220:	30 93 6d 00 	sts	0x006D, r19
 224:	20 93 6c 00 	sts	0x006C, r18
 228:	20 91 60 00 	lds	r18, 0x0060
 22c:	30 91 61 00 	lds	r19, 0x0061
 230:	21 15       	cp	r18, r1
 232:	31 05       	cpc	r19, r1
 234:	41 f4       	brne	.+16     	; 0x246 <malloc+0xee>
 236:	2d b7       	in	r18, 0x3d	; 61
 238:	3e b7       	in	r19, 0x3e	; 62
 23a:	40 91 64 00 	lds	r20, 0x0064
 23e:	50 91 65 00 	lds	r21, 0x0065
 242:	24 1b       	sub	r18, r20
 244:	35 0b       	sbc	r19, r21
 246:	e0 91 6c 00 	lds	r30, 0x006C
 24a:	f0 91 6d 00 	lds	r31, 0x006D
 24e:	e2 17       	cp	r30, r18
 250:	f3 07       	cpc	r31, r19
 252:	a0 f4       	brcc	.+40     	; 0x27c <malloc+0x124>
 254:	2e 1b       	sub	r18, r30
 256:	3f 0b       	sbc	r19, r31
 258:	28 17       	cp	r18, r24
 25a:	39 07       	cpc	r19, r25
 25c:	78 f0       	brcs	.+30     	; 0x27c <malloc+0x124>
 25e:	ac 01       	movw	r20, r24
 260:	4e 5f       	subi	r20, 0xFE	; 254
 262:	5f 4f       	sbci	r21, 0xFF	; 255
 264:	24 17       	cp	r18, r20
 266:	35 07       	cpc	r19, r21
 268:	48 f0       	brcs	.+18     	; 0x27c <malloc+0x124>
 26a:	4e 0f       	add	r20, r30
 26c:	5f 1f       	adc	r21, r31
 26e:	50 93 6d 00 	sts	0x006D, r21
 272:	40 93 6c 00 	sts	0x006C, r20
 276:	81 93       	st	Z+, r24
 278:	91 93       	st	Z+, r25
 27a:	02 c0       	rjmp	.+4      	; 0x280 <malloc+0x128>
 27c:	e0 e0       	ldi	r30, 0x00	; 0
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	cf 01       	movw	r24, r30
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <free>:
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	09 f4       	brne	.+2      	; 0x292 <free+0xa>
 290:	87 c0       	rjmp	.+270    	; 0x3a0 <free+0x118>
 292:	fc 01       	movw	r30, r24
 294:	32 97       	sbiw	r30, 0x02	; 2
 296:	13 82       	std	Z+3, r1	; 0x03
 298:	12 82       	std	Z+2, r1	; 0x02
 29a:	c0 91 6e 00 	lds	r28, 0x006E
 29e:	d0 91 6f 00 	lds	r29, 0x006F
 2a2:	20 97       	sbiw	r28, 0x00	; 0
 2a4:	81 f4       	brne	.+32     	; 0x2c6 <free+0x3e>
 2a6:	20 81       	ld	r18, Z
 2a8:	31 81       	ldd	r19, Z+1	; 0x01
 2aa:	28 0f       	add	r18, r24
 2ac:	39 1f       	adc	r19, r25
 2ae:	80 91 6c 00 	lds	r24, 0x006C
 2b2:	90 91 6d 00 	lds	r25, 0x006D
 2b6:	82 17       	cp	r24, r18
 2b8:	93 07       	cpc	r25, r19
 2ba:	79 f5       	brne	.+94     	; 0x31a <free+0x92>
 2bc:	f0 93 6d 00 	sts	0x006D, r31
 2c0:	e0 93 6c 00 	sts	0x006C, r30
 2c4:	6d c0       	rjmp	.+218    	; 0x3a0 <free+0x118>
 2c6:	de 01       	movw	r26, r28
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	ae 17       	cp	r26, r30
 2ce:	bf 07       	cpc	r27, r31
 2d0:	50 f4       	brcc	.+20     	; 0x2e6 <free+0x5e>
 2d2:	12 96       	adiw	r26, 0x02	; 2
 2d4:	4d 91       	ld	r20, X+
 2d6:	5c 91       	ld	r21, X
 2d8:	13 97       	sbiw	r26, 0x03	; 3
 2da:	9d 01       	movw	r18, r26
 2dc:	41 15       	cp	r20, r1
 2de:	51 05       	cpc	r21, r1
 2e0:	09 f1       	breq	.+66     	; 0x324 <free+0x9c>
 2e2:	da 01       	movw	r26, r20
 2e4:	f3 cf       	rjmp	.-26     	; 0x2cc <free+0x44>
 2e6:	b3 83       	std	Z+3, r27	; 0x03
 2e8:	a2 83       	std	Z+2, r26	; 0x02
 2ea:	40 81       	ld	r20, Z
 2ec:	51 81       	ldd	r21, Z+1	; 0x01
 2ee:	84 0f       	add	r24, r20
 2f0:	95 1f       	adc	r25, r21
 2f2:	8a 17       	cp	r24, r26
 2f4:	9b 07       	cpc	r25, r27
 2f6:	71 f4       	brne	.+28     	; 0x314 <free+0x8c>
 2f8:	8d 91       	ld	r24, X+
 2fa:	9c 91       	ld	r25, X
 2fc:	11 97       	sbiw	r26, 0x01	; 1
 2fe:	84 0f       	add	r24, r20
 300:	95 1f       	adc	r25, r21
 302:	02 96       	adiw	r24, 0x02	; 2
 304:	91 83       	std	Z+1, r25	; 0x01
 306:	80 83       	st	Z, r24
 308:	12 96       	adiw	r26, 0x02	; 2
 30a:	8d 91       	ld	r24, X+
 30c:	9c 91       	ld	r25, X
 30e:	13 97       	sbiw	r26, 0x03	; 3
 310:	93 83       	std	Z+3, r25	; 0x03
 312:	82 83       	std	Z+2, r24	; 0x02
 314:	21 15       	cp	r18, r1
 316:	31 05       	cpc	r19, r1
 318:	29 f4       	brne	.+10     	; 0x324 <free+0x9c>
 31a:	f0 93 6f 00 	sts	0x006F, r31
 31e:	e0 93 6e 00 	sts	0x006E, r30
 322:	3e c0       	rjmp	.+124    	; 0x3a0 <free+0x118>
 324:	d9 01       	movw	r26, r18
 326:	13 96       	adiw	r26, 0x03	; 3
 328:	fc 93       	st	X, r31
 32a:	ee 93       	st	-X, r30
 32c:	12 97       	sbiw	r26, 0x02	; 2
 32e:	4d 91       	ld	r20, X+
 330:	5d 91       	ld	r21, X+
 332:	a4 0f       	add	r26, r20
 334:	b5 1f       	adc	r27, r21
 336:	ea 17       	cp	r30, r26
 338:	fb 07       	cpc	r31, r27
 33a:	79 f4       	brne	.+30     	; 0x35a <free+0xd2>
 33c:	80 81       	ld	r24, Z
 33e:	91 81       	ldd	r25, Z+1	; 0x01
 340:	84 0f       	add	r24, r20
 342:	95 1f       	adc	r25, r21
 344:	02 96       	adiw	r24, 0x02	; 2
 346:	d9 01       	movw	r26, r18
 348:	11 96       	adiw	r26, 0x01	; 1
 34a:	9c 93       	st	X, r25
 34c:	8e 93       	st	-X, r24
 34e:	82 81       	ldd	r24, Z+2	; 0x02
 350:	93 81       	ldd	r25, Z+3	; 0x03
 352:	13 96       	adiw	r26, 0x03	; 3
 354:	9c 93       	st	X, r25
 356:	8e 93       	st	-X, r24
 358:	12 97       	sbiw	r26, 0x02	; 2
 35a:	e0 e0       	ldi	r30, 0x00	; 0
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	9b 81       	ldd	r25, Y+3	; 0x03
 362:	00 97       	sbiw	r24, 0x00	; 0
 364:	19 f0       	breq	.+6      	; 0x36c <free+0xe4>
 366:	fe 01       	movw	r30, r28
 368:	ec 01       	movw	r28, r24
 36a:	f9 cf       	rjmp	.-14     	; 0x35e <free+0xd6>
 36c:	ce 01       	movw	r24, r28
 36e:	02 96       	adiw	r24, 0x02	; 2
 370:	28 81       	ld	r18, Y
 372:	39 81       	ldd	r19, Y+1	; 0x01
 374:	82 0f       	add	r24, r18
 376:	93 1f       	adc	r25, r19
 378:	20 91 6c 00 	lds	r18, 0x006C
 37c:	30 91 6d 00 	lds	r19, 0x006D
 380:	28 17       	cp	r18, r24
 382:	39 07       	cpc	r19, r25
 384:	69 f4       	brne	.+26     	; 0x3a0 <free+0x118>
 386:	30 97       	sbiw	r30, 0x00	; 0
 388:	29 f4       	brne	.+10     	; 0x394 <free+0x10c>
 38a:	10 92 6f 00 	sts	0x006F, r1
 38e:	10 92 6e 00 	sts	0x006E, r1
 392:	02 c0       	rjmp	.+4      	; 0x398 <free+0x110>
 394:	13 82       	std	Z+3, r1	; 0x03
 396:	12 82       	std	Z+2, r1	; 0x02
 398:	d0 93 6d 00 	sts	0x006D, r29
 39c:	c0 93 6c 00 	sts	0x006C, r28
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
