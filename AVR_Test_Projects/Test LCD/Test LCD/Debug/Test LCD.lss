
Test LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  0000025e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000313  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000020e  00000000  00000000  00000601  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001e3  00000000  00000000  0000080f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d0  00000000  00000000  000009f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000021d  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000024f  00000000  00000000  00000ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000f30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	7f c0       	rjmp	.+254    	; 0x10c <__vector_6>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	6f c0       	rjmp	.+222    	; 0x106 <_Z7segcharh+0x46>
  28:	53 c0       	rjmp	.+166    	; 0xd0 <_Z7segcharh+0x10>
  2a:	55 c0       	rjmp	.+170    	; 0xd6 <_Z7segcharh+0x16>
  2c:	57 c0       	rjmp	.+174    	; 0xdc <_Z7segcharh+0x1c>
  2e:	59 c0       	rjmp	.+178    	; 0xe2 <_Z7segcharh+0x22>
  30:	5b c0       	rjmp	.+182    	; 0xe8 <_Z7segcharh+0x28>
  32:	5d c0       	rjmp	.+186    	; 0xee <_Z7segcharh+0x2e>
  34:	5f c0       	rjmp	.+190    	; 0xf4 <_Z7segcharh+0x34>
  36:	61 c0       	rjmp	.+194    	; 0xfa <_Z7segcharh+0x3a>
  38:	63 c0       	rjmp	.+198    	; 0x100 <_Z7segcharh+0x40>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_clear_bss>:
  46:	20 e0       	ldi	r18, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	01 c0       	rjmp	.+2      	; 0x50 <.do_clear_bss_start>

0000004e <.do_clear_bss_loop>:
  4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
  50:	a3 36       	cpi	r26, 0x63	; 99
  52:	b2 07       	cpc	r27, r18
  54:	e1 f7       	brne	.-8      	; 0x4e <.do_clear_bss_loop>
  56:	a0 d0       	rcall	.+320    	; 0x198 <main>
  58:	c6 c0       	rjmp	.+396    	; 0x1e6 <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <_Z10timer_initj>:
	}
}

void timer_init(unsigned int speed)
{
	TCCR1B |=(1<<WGM12);
  5c:	9e b5       	in	r25, 0x2e	; 46
  5e:	98 60       	ori	r25, 0x08	; 8
  60:	9e bd       	out	0x2e, r25	; 46
	TIMSK |=(1<<OCIE1A);
  62:	99 b7       	in	r25, 0x39	; 57
  64:	90 61       	ori	r25, 0x10	; 16
  66:	99 bf       	out	0x39, r25	; 57
	OCR1AH = speed; //записываем в регистр число для сравнения
  68:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b00000000;
  6a:	1a bc       	out	0x2a, r1	; 42
	TCCR1B |=(1<<CS11);
  6c:	8e b5       	in	r24, 0x2e	; 46
  6e:	82 60       	ori	r24, 0x02	; 2
  70:	8e bd       	out	0x2e, r24	; 46
  72:	08 95       	ret

00000074 <_Z9led_printj>:
}

void led_print(unsigned int number)
{
  74:	ac 01       	movw	r20, r24
	R1 = number%10;
  76:	9c 01       	movw	r18, r24
  78:	ad ec       	ldi	r26, 0xCD	; 205
  7a:	bc ec       	ldi	r27, 0xCC	; 204
  7c:	a8 d0       	rcall	.+336    	; 0x1ce <__umulhisi3>
  7e:	96 95       	lsr	r25
  80:	87 95       	ror	r24
  82:	96 95       	lsr	r25
  84:	87 95       	ror	r24
  86:	96 95       	lsr	r25
  88:	87 95       	ror	r24
  8a:	9c 01       	movw	r18, r24
  8c:	22 0f       	add	r18, r18
  8e:	33 1f       	adc	r19, r19
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	82 0f       	add	r24, r18
  9e:	93 1f       	adc	r25, r19
  a0:	9a 01       	movw	r18, r20
  a2:	28 1b       	sub	r18, r24
  a4:	39 0b       	sbc	r19, r25
  a6:	20 93 62 00 	sts	0x0062, r18
	R2 = number/10;
  aa:	9a 01       	movw	r18, r20
  ac:	90 d0       	rcall	.+288    	; 0x1ce <__umulhisi3>
  ae:	96 95       	lsr	r25
  b0:	87 95       	ror	r24
  b2:	96 95       	lsr	r25
  b4:	87 95       	ror	r24
  b6:	96 95       	lsr	r25
  b8:	87 95       	ror	r24
  ba:	80 93 61 00 	sts	0x0061, r24
  be:	08 95       	ret

000000c0 <_Z7segcharh>:
}

void segchar(unsigned char seg)
{
	switch (seg)
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	8a 30       	cpi	r24, 0x0A	; 10
  c4:	91 05       	cpc	r25, r1
  c6:	08 f5       	brcc	.+66     	; 0x10a <_Z7segcharh+0x4a>
  c8:	fc 01       	movw	r30, r24
  ca:	ed 5e       	subi	r30, 0xED	; 237
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	09 94       	ijmp
	{
		case 1: PORTD = 0b11111001; break;
  d0:	89 ef       	ldi	r24, 0xF9	; 249
  d2:	82 bb       	out	0x12, r24	; 18
  d4:	08 95       	ret
		case 2: PORTD = 0b10100100; break;
  d6:	84 ea       	ldi	r24, 0xA4	; 164
  d8:	82 bb       	out	0x12, r24	; 18
  da:	08 95       	ret
		case 3: PORTD = 0b10110000; break;
  dc:	80 eb       	ldi	r24, 0xB0	; 176
  de:	82 bb       	out	0x12, r24	; 18
  e0:	08 95       	ret
		case 4: PORTD = 0b10011001; break;
  e2:	89 e9       	ldi	r24, 0x99	; 153
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	08 95       	ret
		case 5: PORTD = 0b10010010; break;
  e8:	82 e9       	ldi	r24, 0x92	; 146
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	08 95       	ret
		case 6: PORTD = 0b10000010; break;
  ee:	82 e8       	ldi	r24, 0x82	; 130
  f0:	82 bb       	out	0x12, r24	; 18
  f2:	08 95       	ret
		case 7: PORTD = 0b11111000; break;
  f4:	88 ef       	ldi	r24, 0xF8	; 248
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	08 95       	ret
		case 8: PORTD = 0b10000000; break;
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	08 95       	ret
		case 9: PORTD = 0b10010000; break;
 100:	80 e9       	ldi	r24, 0x90	; 144
 102:	82 bb       	out	0x12, r24	; 18
 104:	08 95       	ret
		case 0: PORTD = 0b11000000; break;
 106:	80 ec       	ldi	r24, 0xC0	; 192
 108:	82 bb       	out	0x12, r24	; 18
 10a:	08 95       	ret

0000010c <__vector_6>:
unsigned int i;
unsigned char R1=0,R2=0;
unsigned char n_count=0;

ISR(TIMER1_COMPA_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	if(n_count==0)
 12e:	80 91 60 00 	lds	r24, 0x0060
 132:	81 11       	cpse	r24, r1
 134:	06 c0       	rjmp	.+12     	; 0x142 <__vector_6+0x36>
	{
		PORTB =0x00;
 136:	18 ba       	out	0x18, r1	; 24
		PORTB &=~(1<<PB0);
 138:	c0 98       	cbi	0x18, 0	; 24
		PORTB |=(1<<PB1);
 13a:	c1 9a       	sbi	0x18, 1	; 24
		segchar(R1);
 13c:	80 91 62 00 	lds	r24, 0x0062
 140:	bf df       	rcall	.-130    	; 0xc0 <_Z7segcharh>
	}
	if(n_count==1)
 142:	80 91 60 00 	lds	r24, 0x0060
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	31 f4       	brne	.+12     	; 0x156 <__vector_6+0x4a>
	{
		PORTB =0x00;
 14a:	18 ba       	out	0x18, r1	; 24
		PORTB &=~(1<<PB1);
 14c:	c1 98       	cbi	0x18, 1	; 24
		PORTB|=(1<<PORTB0);
 14e:	c0 9a       	sbi	0x18, 0	; 24
		segchar(R2);
 150:	80 91 61 00 	lds	r24, 0x0061
 154:	b5 df       	rcall	.-150    	; 0xc0 <_Z7segcharh>
	}
	n_count++;
 156:	80 91 60 00 	lds	r24, 0x0060
 15a:	8f 5f       	subi	r24, 0xFF	; 255
	if(n_count>1)
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	18 f4       	brcc	.+6      	; 0x166 <__vector_6+0x5a>
		PORTB =0x00;
		PORTB &=~(1<<PB1);
		PORTB|=(1<<PORTB0);
		segchar(R2);
	}
	n_count++;
 160:	80 93 60 00 	sts	0x0060, r24
 164:	02 c0       	rjmp	.+4      	; 0x16a <__vector_6+0x5e>
	if(n_count>1)
	{
		n_count=0;
 166:	10 92 60 00 	sts	0x0060, r1
	}
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <_Z9port_initv>:
	}
}

void port_init()
{
	DDRB |= 1<<PB0 | 1<<PB1;
 18c:	87 b3       	in	r24, 0x17	; 23
 18e:	83 60       	ori	r24, 0x03	; 3
 190:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	81 bb       	out	0x11, r24	; 17
 196:	08 95       	ret

00000198 <main>:
#include <util/delay.h>
#include "lcd.h"

int main(void)
{
	port_init();
 198:	f9 df       	rcall	.-14     	; 0x18c <_Z9port_initv>
	timer_init(125);
 19a:	8d e7       	ldi	r24, 0x7D	; 125
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	5e df       	rcall	.-324    	; 0x5c <_Z10timer_initj>
	sei();
 1a0:	78 94       	sei
    while(1)
    {
              for(int i=0; i<100; i++)
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	00 e0       	ldi	r16, 0x00	; 0
 1a8:	10 e0       	ldi	r17, 0x00	; 0
              {
	              led_print(i);
 1aa:	ce 01       	movw	r24, r28
 1ac:	63 df       	rcall	.-314    	; 0x74 <_Z9led_printj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	84 e3       	ldi	r24, 0x34	; 52
 1b2:	9c e0       	ldi	r25, 0x0C	; 12
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x1c>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x26>
 1be:	00 00       	nop
	port_init();
	timer_init(125);
	sei();
    while(1)
    {
              for(int i=0; i<100; i++)
 1c0:	21 96       	adiw	r28, 0x01	; 1
 1c2:	c4 36       	cpi	r28, 0x64	; 100
 1c4:	d1 05       	cpc	r29, r1
 1c6:	8c f3       	brlt	.-30     	; 0x1aa <main+0x12>
 1c8:	c0 2f       	mov	r28, r16
 1ca:	d1 2f       	mov	r29, r17
 1cc:	ee cf       	rjmp	.-36     	; 0x1aa <main+0x12>

000001ce <__umulhisi3>:
 1ce:	a2 9f       	mul	r26, r18
 1d0:	b0 01       	movw	r22, r0
 1d2:	b3 9f       	mul	r27, r19
 1d4:	c0 01       	movw	r24, r0
 1d6:	a3 9f       	mul	r26, r19
 1d8:	01 d0       	rcall	.+2      	; 0x1dc <__umulhisi3+0xe>
 1da:	b2 9f       	mul	r27, r18
 1dc:	70 0d       	add	r23, r0
 1de:	81 1d       	adc	r24, r1
 1e0:	11 24       	eor	r1, r1
 1e2:	91 1d       	adc	r25, r1
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
