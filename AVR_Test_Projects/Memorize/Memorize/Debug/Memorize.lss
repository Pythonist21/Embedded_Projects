
Memorize.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000be  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b4  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000081  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000cb  00000000  00000000  0000024b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000012f  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000024  00000000  00000000  0000047b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  0000049f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	18 c0       	rjmp	.+48     	; 0x66 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
}
int main(void)
{
    while(1)
    {
        for(int i=0; i<8; i++)
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB |=(1<<i);
  3c:	41 e0       	ldi	r20, 0x01	; 1
  3e:	50 e0       	ldi	r21, 0x00	; 0
}
int main(void)
{
    while(1)
    {
        for(int i=0; i<8; i++)
  40:	e0 e0       	ldi	r30, 0x00	; 0
  42:	70 e0       	ldi	r23, 0x00	; 0
		{
			PORTB |=(1<<i);
  44:	68 b3       	in	r22, 0x18	; 24
  46:	9a 01       	movw	r18, r20
  48:	08 2e       	mov	r0, r24
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__SREG__+0x11>
  4c:	22 0f       	add	r18, r18
  4e:	33 1f       	adc	r19, r19
  50:	0a 94       	dec	r0
  52:	e2 f7       	brpl	.-8      	; 0x4c <__SREG__+0xd>
  54:	26 2b       	or	r18, r22
  56:	28 bb       	out	0x18, r18	; 24
}
int main(void)
{
    while(1)
    {
        for(int i=0; i<8; i++)
  58:	01 96       	adiw	r24, 0x01	; 1
  5a:	88 30       	cpi	r24, 0x08	; 8
  5c:	91 05       	cpc	r25, r1
  5e:	94 f3       	brlt	.-28     	; 0x44 <__SREG__+0x5>
  60:	8e 2f       	mov	r24, r30
  62:	97 2f       	mov	r25, r23
  64:	ef cf       	rjmp	.-34     	; 0x44 <__SREG__+0x5>

00000066 <_exit>:
  66:	f8 94       	cli

00000068 <__stop_program>:
  68:	ff cf       	rjmp	.-2      	; 0x68 <__stop_program>
