
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000d2  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000078  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000273  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000180  00000000  00000000  000003ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000011b  00000000  00000000  0000056d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000009c  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000207  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000024  00000000  00000000  0000092b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000094f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	22 c0       	rjmp	.+68     	; 0x7a <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include "eeprom.h"
#include "uart.h"

int main(void)
{
	port_init();
  38:	0f d0       	rcall	.+30     	; 0x58 <_Z9port_initv>
	uart_init();
  3a:	17 d0       	rcall	.+46     	; 0x6a <_Z9uart_initv>
	asm("nop");
  3c:	00 00       	nop
	eeprom_write(1, 120);
  3e:	68 e7       	ldi	r22, 0x78	; 120
  40:	81 e0       	ldi	r24, 0x01	; 1
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	01 d0       	rcall	.+2      	; 0x48 <_Z12eeprom_writejh>
  46:	ff cf       	rjmp	.-2      	; 0x46 <__SREG__+0x7>

00000048 <_Z12eeprom_writejh>:
﻿#include "eeprom.h"

void eeprom_write(unsigned int uiAddress, unsigned char ucData)
{

	while(EECR & (1<<EEWE)) //ждем освобождения флага окончания последней операцией с памятью
  48:	e1 99       	sbic	0x1c, 1	; 28
  4a:	fe cf       	rjmp	.-4      	; 0x48 <_Z12eeprom_writejh>
	{}
	EEAR = uiAddress; //Устанавливаем адрес
  4c:	9f bb       	out	0x1f, r25	; 31
  4e:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData; //Пищем данные в регистр
  50:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE); //Разрешаем запись
  52:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEWE); //Пишем байт в память
  54:	e1 9a       	sbi	0x1c, 1	; 28
  56:	08 95       	ret

00000058 <_Z9port_initv>:
}
*/

void port_init()
{
	DDRD =(0<<PD0);  //rx на вход
  58:	11 ba       	out	0x11, r1	; 17
	DDRD = (1<<PD1);    //tx на выход
  5a:	82 e0       	ldi	r24, 0x02	; 2
  5c:	81 bb       	out	0x11, r24	; 17
	DDRC=0xFF;
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
  62:	15 ba       	out	0x15, r1	; 21
	DDRB=(1<<PB0);
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	87 bb       	out	0x17, r24	; 23
  68:	08 95       	ret

0000006a <_Z9uart_initv>:
}

void uart_init()
{
	//разрешаем прием, передачу, прерывание по приёму
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(0<<UDRIE);
  6a:	88 e9       	ldi	r24, 0x98	; 152
  6c:	8a b9       	out	0x0a, r24	; 10
	//8 бит данных, 1 стоп бит, без контроля четности
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  6e:	86 e8       	ldi	r24, 0x86	; 134
  70:	80 bd       	out	0x20, r24	; 32
	//Baud Rate: 9600
	UBRRL = 0x33;
  72:	83 e3       	ldi	r24, 0x33	; 51
  74:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0x00;
  76:	10 bc       	out	0x20, r1	; 32
  78:	08 95       	ret

0000007a <_exit>:
  7a:	f8 94       	cli

0000007c <__stop_program>:
  7c:	ff cf       	rjmp	.-2      	; 0x7c <__stop_program>
