
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000203  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000123  00000000  00000000  00000395  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c9  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000088  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ab  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003c  00000000  00000000  000007b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000038  00000000  00000000  000007f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	25 c0       	rjmp	.+74     	; 0x62 <__vector_11>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	2f d0       	rcall	.+94     	; 0x92 <main>
  34:	3e c0       	rjmp	.+124    	; 0xb2 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z9port_initv>:
}
*/

void port_init()
{
	DDRD =(0<<PD0);  //rx на вход
  38:	11 ba       	out	0x11, r1	; 17
	DDRD = (1<<PD1);    //tx на выход
  3a:	82 e0       	ldi	r24, 0x02	; 2
  3c:	81 bb       	out	0x11, r24	; 17
	DDRC=0xFF;
  3e:	8f ef       	ldi	r24, 0xFF	; 255
  40:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
  42:	15 ba       	out	0x15, r1	; 21
	DDRB=(1<<PB0);
  44:	81 e0       	ldi	r24, 0x01	; 1
  46:	87 bb       	out	0x17, r24	; 23
  48:	08 95       	ret

0000004a <_Z9uart_initv>:
}

void uart_init()
{
	//разрешаем прием, передачу, прерывание по приёму
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(0<<UDRIE);
  4a:	88 e9       	ldi	r24, 0x98	; 152
  4c:	8a b9       	out	0x0a, r24	; 10
	//8 бит данных, 1 стоп бит, без контроля четности
	UCSRC = (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  4e:	86 e8       	ldi	r24, 0x86	; 134
  50:	80 bd       	out	0x20, r24	; 32
	//Baud Rate: 9600
	UBRRL = 0x33;
  52:	83 e3       	ldi	r24, 0x33	; 51
  54:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0x00;
  56:	10 bc       	out	0x20, r1	; 32
  58:	08 95       	ret

0000005a <_Z13uart_transmith>:
}

void uart_transmit(unsigned char data)
{
	while (!(UCSRA & (1<<UDRE)));
  5a:	5d 9b       	sbis	0x0b, 5	; 11
  5c:	fe cf       	rjmp	.-4      	; 0x5a <_Z13uart_transmith>
	UDR = data;
  5e:	8c b9       	out	0x0c, r24	; 12
  60:	08 95       	ret

00000062 <__vector_11>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include "uart.h"

ISR(USART_RXC_vect)
{
  62:	1f 92       	push	r1
  64:	0f 92       	push	r0
  66:	0f b6       	in	r0, 0x3f	; 63
  68:	0f 92       	push	r0
  6a:	11 24       	eor	r1, r1
  6c:	8f 93       	push	r24
	switch(UDR)
  6e:	8c b1       	in	r24, 0x0c	; 12
  70:	80 33       	cpi	r24, 0x30	; 48
  72:	29 f0       	breq	.+10     	; 0x7e <__vector_11+0x1c>
  74:	81 33       	cpi	r24, 0x31	; 49
  76:	29 f4       	brne	.+10     	; 0x82 <__vector_11+0x20>
	{
		case '1':
		PORTC = (1<<PC0) | (1<<PC1);
  78:	83 e0       	ldi	r24, 0x03	; 3
  7a:	85 bb       	out	0x15, r24	; 21
		break;
  7c:	04 c0       	rjmp	.+8      	; 0x86 <__vector_11+0x24>
		case '0':
		PORTC = 0x00;
  7e:	15 ba       	out	0x15, r1	; 21
		break;
  80:	02 c0       	rjmp	.+4      	; 0x86 <__vector_11+0x24>
		default:
		PORTB =(1<<PB0);
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	88 bb       	out	0x18, r24	; 24
		break;
	}
}
  86:	8f 91       	pop	r24
  88:	0f 90       	pop	r0
  8a:	0f be       	out	0x3f, r0	; 63
  8c:	0f 90       	pop	r0
  8e:	1f 90       	pop	r1
  90:	18 95       	reti

00000092 <main>:

int main(void)
{
	port_init();
  92:	d2 df       	rcall	.-92     	; 0x38 <_Z9port_initv>
	uart_init();
  94:	da df       	rcall	.-76     	; 0x4a <_Z9uart_initv>
	sei();
  96:	78 94       	sei
	 uart_transmit('p');
  98:	80 e7       	ldi	r24, 0x70	; 112
  9a:	df df       	rcall	.-66     	; 0x5a <_Z13uart_transmith>
	 uart_transmit('i');
  9c:	89 e6       	ldi	r24, 0x69	; 105
  9e:	dd df       	rcall	.-70     	; 0x5a <_Z13uart_transmith>
	 uart_transmit('d');
  a0:	84 e6       	ldi	r24, 0x64	; 100
  a2:	db df       	rcall	.-74     	; 0x5a <_Z13uart_transmith>
	 uart_transmit('o');
  a4:	8f e6       	ldi	r24, 0x6F	; 111
  a6:	d9 df       	rcall	.-78     	; 0x5a <_Z13uart_transmith>
	 uart_transmit('r');
  a8:	82 e7       	ldi	r24, 0x72	; 114
  aa:	d7 df       	rcall	.-82     	; 0x5a <_Z13uart_transmith>
	 uart_transmit('!');
  ac:	81 e2       	ldi	r24, 0x21	; 33
  ae:	d5 df       	rcall	.-86     	; 0x5a <_Z13uart_transmith>
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0x1e>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
